## spinnaker.template
## Template database file to control the features of a Point Grey camera using Spinnaker SDk.
##
## Note: the strings and values for the mbbo and mbbi records in this database
## are built dynamically at run-time based on the capabilites of the specific camera

include "ADBase.template"

## These are the records from ADBase.template that we modify
## Disable ReadStatus when acquisition is active because querying the detector 
## when it is streaming causes dropped frames
record(bo, $(P)$(R)ReadStatus) {
  field(SDIS, "$(P)$(R)Acquire NPP NMS")
  field(DISV, "1")
}

# The Point Grey cameras use FrameRate rather than AcquirePeriod.  Make AcquirePeriod slave
# to FrameRate and disable PINI so only FrameRate is restored from autosave
record(ao, "$(P)$(R)AcquirePeriod")
{
   field(PINI, "NO")
   info(asyn:READBACK, "1")
}

## Pixel format
record(mbbo, "$(P)$(R)PixelFormat") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SP_PIXEL_FORMAT")
}

record(mbbi, "$(P)$(R)PixelFormat_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)SP_PIXEL_FORMAT")
}

## Video mode
record(mbbo, "$(P)$(R)VideoMode") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SP_VIDEO_MODE")
}

record(mbbi, "$(P)$(R)VideoMode_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)SP_VIDEO_MODE")
}

## Trigger source
record(mbbo, "$(P)$(R)TriggerSource") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SP_TRIGGER_SOURCE")
}

record(mbbi, "$(P)$(R)TriggerSource_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)SP_TRIGGER_SOURCE")
}

## Trigger polarity
record(bo, "$(P)$(R)TriggerPolarity") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SP_TRIGGER_ACTIVATION")
}

record(bi, "$(P)$(R)TriggerPolarity_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)SP_TRIGGER_ACTIVATION")
}

## Software trigger
record(bo, "$(P)$(R)SoftwareTrigger") {
  field(PINI, "NO")
  field(DTYP, "asynInt32")
  field(ONAM, "Trigger")
  field(ZNAM, "Done")
  field(OUT,  "@asyn($(PORT) 0)SP_SOFTWARE_TRIGGER")
}

## Trigger delay
record(ao, "$(P)$(R)TriggerDelay") {
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT) 0)SP_TRIGGER_DELAY")
  field(PREC, "3")
  field(VAL, ".01")
}

record(ai, "$(P)$(R)TriggerDelay_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT) 0)SP_TRIGGER_DELAY")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
}


## Frame rate
record(ao, "$(P)$(R)FrameRate") {
  field(PINI, "YES")
  field(DTYP, "asynFloat64")
  field(OUT,  "@asyn($(PORT) 0)SP_FRAME_RATE")
  field(PREC, "3")
  field(VAL, "10.")
  info(asyn:READBACK, "1")
}

record(ai, "$(P)$(R)FrameRate_RBV") {
  field(DTYP, "asynFloat64")
  field(INP,  "@asyn($(PORT) 0)SP_FRAME_RATE")
  field(PREC, "3")
  field(SCAN, "I/O Intr")
}

## Frame rate enable
record(bo, "$(P)$(R)FrameRateEnable") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SP_FRAME_RATE_ENABLE")
  field(ZNAM, "Disable")
  field(ONAM, "Enable")
}

record(bi, "$(P)$(R)FrameRateEnable_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)SP_FRAME_RATE_ENABLE")
  field(ZNAM, "Disable")
  field(ONAM, "Enable")
}

## Frame rate auto
record(mbbo, "$(P)$(R)FrameRateAuto") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT) 0)SP_FRAME_RATE_AUTO")
}

record(mbbi, "$(P)$(R)FrameRateAuto_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT) 0)SP_FRAME_RATE_AUTO")
}


